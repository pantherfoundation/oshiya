/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers';
import {FunctionFragment, Result, EventFragment} from '@ethersproject/abi';
import {Listener, Provider} from '@ethersproject/providers';
import type {Event, EventFilter} from 'ethers';

export type PromiseOrValue<T> = T | Promise<T>;

export interface TypedEvent<
    TArgsArray extends Array<any> = any,
    TArgsObject = any,
> extends Event {
    args: TArgsArray & TArgsObject;
}

export interface TypedEventFilter<_TEvent extends TypedEvent>
    extends EventFilter {}

export interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}

type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;

export interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
        listener: TypedListener<TEvent>,
    ): TRes;
    (eventName: string, listener: Listener): TRes;
}

export type MinEthersFactory<C, ARGS> = {
    deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
    infer C,
    any
>
    ? C
    : never;

export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
    ? Parameters<F['deploy']>
    : never;

    export type G1PointStruct = { x: BigNumberish; y: BigNumberish };

    export type G1PointStructOutput = [BigNumber, BigNumber] & {
      x: BigNumber;
      y: BigNumber;
    };

    export type G2PointStruct = {
      x: [BigNumberish, BigNumberish];
      y: [BigNumberish, BigNumberish];
    };

    export type G2PointStructOutput = [
      [BigNumber, BigNumber],
      [BigNumber, BigNumber]
    ] & { x: [BigNumber, BigNumber]; y: [BigNumber, BigNumber] };

    export type SnarkProofStruct = {
      a: G1PointStruct;
      b: G2PointStruct;
      c: G1PointStruct;
    };

    export type SnarkProofStructOutput = [
      G1PointStructOutput,
      G2PointStructOutput,
      G1PointStructOutput
    ] & { a: G1PointStructOutput; b: G2PointStructOutput; c: G1PointStructOutput };

    export declare namespace BusQueues {
      export type BusQueueRecStruct = {
        queueId: BigNumberish;
        nUtxos: BigNumberish;
        reward: BigNumberish;
        potentialExtraReward: BigNumberish;
        firstUtxoBlock: BigNumberish;
        lastUtxoBlock: BigNumberish;
        remainingBlocks: BigNumberish;
        commitment: BytesLike;
      };

      export type BusQueueRecStructOutput = [
        number,
        number,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        string
      ] & {
        queueId: number;
        nUtxos: number;
        reward: BigNumber;
        potentialExtraReward: BigNumber;
        firstUtxoBlock: number;
        lastUtxoBlock: number;
        remainingBlocks: number;
        commitment: string;
      };
    }

    export interface ForestTreeInterface extends utils.Interface {
      contractName: "ForestTree";
      functions: {
        "CLAIM_MINING_REWARD_VERSION()": FunctionFragment;
        "FEE_MASTER()": FunctionFragment;
        "REWARD_RESERVE_ALLOCATOR()": FunctionFragment;
        "REWARD_TOKEN()": FunctionFragment;
        "UNDEFINED_CACHE_INDEX()": FunctionFragment;
        "addUtxosToBusQueue(bytes32[],uint256,bytes32,bytes32,uint96)": FunctionFragment;
        "addUtxosToBusQueueAndTaxiTree(bytes32[],uint8,uint256,bytes32,bytes32,uint96)": FunctionFragment;
        "allocateRewardReserve(uint112)": FunctionFragment;
        "busTreeStartTime()": FunctionFragment;
        "claimMiningReward(address)": FunctionFragment;
        "claimMiningRewardWithSignature(address,uint8,bytes32,bytes32)": FunctionFragment;
        "forestLeafs(uint256)": FunctionFragment;
        "getBusQueue(uint32)": FunctionFragment;
        "getBusQueuesStats()": FunctionFragment;
        "getBusTreeRoot()": FunctionFragment;
        "getBusTreeStats()": FunctionFragment;
        "getCacheStats()": FunctionFragment;
        "getCachedPrimarySubtreeRoot()": FunctionFragment;
        "getFerryTreeRoot()": FunctionFragment;
        "getOldestPendingQueues(uint32)": FunctionFragment;
        "getParams()": FunctionFragment;
        "getRoots()": FunctionFragment;
        "getTaxiTreeRoot()": FunctionFragment;
        "initializeForestTrees(uint160,uint16,uint16,uint16)": FunctionFragment;
        "isCachedRoot(bytes32,uint256)": FunctionFragment;
        "netRewardReserve()": FunctionFragment;
        "onboardBusQueue(address,uint32,uint256[],((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)))": FunctionFragment;
        "onboardingQueueCircuitId()": FunctionFragment;
        "rewards(address)": FunctionFragment;
        "totalLeavesInsertions()": FunctionFragment;
        "updateBusQueueRewardParams(uint16,uint16,uint16)": FunctionFragment;
        "utxoCounter()": FunctionFragment;
      };

      encodeFunctionData(
        functionFragment: "CLAIM_MINING_REWARD_VERSION",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "FEE_MASTER",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "REWARD_RESERVE_ALLOCATOR",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "REWARD_TOKEN",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "UNDEFINED_CACHE_INDEX",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "addUtxosToBusQueue",
        values: [BytesLike[], BigNumberish, BytesLike, BytesLike, BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "addUtxosToBusQueueAndTaxiTree",
        values: [
          BytesLike[],
          BigNumberish,
          BigNumberish,
          BytesLike,
          BytesLike,
          BigNumberish
        ]
      ): string;
      encodeFunctionData(
        functionFragment: "allocateRewardReserve",
        values: [BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "busTreeStartTime",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "claimMiningReward",
        values: [string]
      ): string;
      encodeFunctionData(
        functionFragment: "claimMiningRewardWithSignature",
        values: [string, BigNumberish, BytesLike, BytesLike]
      ): string;
      encodeFunctionData(
        functionFragment: "forestLeafs",
        values: [BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "getBusQueue",
        values: [BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "getBusQueuesStats",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getBusTreeRoot",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getBusTreeStats",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getCacheStats",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getCachedPrimarySubtreeRoot",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getFerryTreeRoot",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "getOldestPendingQueues",
        values: [BigNumberish]
      ): string;
      encodeFunctionData(functionFragment: "getParams", values?: undefined): string;
      encodeFunctionData(functionFragment: "getRoots", values?: undefined): string;
      encodeFunctionData(
        functionFragment: "getTaxiTreeRoot",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "initializeForestTrees",
        values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "isCachedRoot",
        values: [BytesLike, BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "netRewardReserve",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "onboardBusQueue",
        values: [string, BigNumberish, BigNumberish[], SnarkProofStruct]
      ): string;
      encodeFunctionData(
        functionFragment: "onboardingQueueCircuitId",
        values?: undefined
      ): string;
      encodeFunctionData(functionFragment: "rewards", values: [string]): string;
      encodeFunctionData(
        functionFragment: "totalLeavesInsertions",
        values?: undefined
      ): string;
      encodeFunctionData(
        functionFragment: "updateBusQueueRewardParams",
        values: [BigNumberish, BigNumberish, BigNumberish]
      ): string;
      encodeFunctionData(
        functionFragment: "utxoCounter",
        values?: undefined
      ): string;

      decodeFunctionResult(
        functionFragment: "CLAIM_MINING_REWARD_VERSION",
        data: BytesLike
      ): Result;
      decodeFunctionResult(functionFragment: "FEE_MASTER", data: BytesLike): Result;
      decodeFunctionResult(
        functionFragment: "REWARD_RESERVE_ALLOCATOR",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "REWARD_TOKEN",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "UNDEFINED_CACHE_INDEX",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "addUtxosToBusQueue",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "addUtxosToBusQueueAndTaxiTree",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "allocateRewardReserve",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "busTreeStartTime",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "claimMiningReward",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "claimMiningRewardWithSignature",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "forestLeafs",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getBusQueue",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getBusQueuesStats",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getBusTreeRoot",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getBusTreeStats",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getCacheStats",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getCachedPrimarySubtreeRoot",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getFerryTreeRoot",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "getOldestPendingQueues",
        data: BytesLike
      ): Result;
      decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
      decodeFunctionResult(functionFragment: "getRoots", data: BytesLike): Result;
      decodeFunctionResult(
        functionFragment: "getTaxiTreeRoot",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "initializeForestTrees",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "isCachedRoot",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "netRewardReserve",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "onboardBusQueue",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "onboardingQueueCircuitId",
        data: BytesLike
      ): Result;
      decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
      decodeFunctionResult(
        functionFragment: "totalLeavesInsertions",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "updateBusQueueRewardParams",
        data: BytesLike
      ): Result;
      decodeFunctionResult(
        functionFragment: "utxoCounter",
        data: BytesLike
      ): Result;

      events: {
        "BusBatchOnboarded(uint256,bytes32,uint256,uint256,bytes32,bytes32)": EventFragment;
        "BusBranchFilled(uint256,bytes32)": EventFragment;
        "BusQueueOpened(uint256)": EventFragment;
        "BusQueueProcessed(uint256)": EventFragment;
        "BusQueueRewardAdded(uint256,uint256)": EventFragment;
        "BusQueueRewardParamsUpdated(uint256,uint256,uint256)": EventFragment;
        "BusQueueRewardReserveAllocated(int112,uint112)": EventFragment;
        "BusQueueRewardReserveUpdated(int112)": EventFragment;
        "ForestRootUpdated(uint256,bytes32,bytes32,uint256)": EventFragment;
        "MinerRewardAccounted(uint32,address,uint256)": EventFragment;
        "MinerRewardClaimed(uint32,address,uint256)": EventFragment;
        "TaxiRootUpdated(bytes32,uint256)": EventFragment;
        "TaxiSubtreeRootUpdated(bytes32)": EventFragment;
        "TaxiUtxoAdded(bytes32,uint256)": EventFragment;
        "UtxoBusQueued(bytes32,uint256,uint256)": EventFragment;
      };

      getEvent(nameOrSignatureOrTopic: "BusBatchOnboarded"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "BusBranchFilled"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "BusQueueOpened"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "BusQueueProcessed"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "BusQueueRewardAdded"): EventFragment;
      getEvent(
        nameOrSignatureOrTopic: "BusQueueRewardParamsUpdated"
      ): EventFragment;
      getEvent(
        nameOrSignatureOrTopic: "BusQueueRewardReserveAllocated"
      ): EventFragment;
      getEvent(
        nameOrSignatureOrTopic: "BusQueueRewardReserveUpdated"
      ): EventFragment;
      getEvent(nameOrSignatureOrTopic: "ForestRootUpdated"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "MinerRewardAccounted"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "MinerRewardClaimed"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "TaxiRootUpdated"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "TaxiSubtreeRootUpdated"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "TaxiUtxoAdded"): EventFragment;
      getEvent(nameOrSignatureOrTopic: "UtxoBusQueued"): EventFragment;
    }

    export type BusBatchOnboardedEvent = TypedEvent<
      [BigNumber, string, BigNumber, BigNumber, string, string],
      {
        queueId: BigNumber;
        batchRoot: string;
        numUtxosInBatch: BigNumber;
        leftLeafIndexInBusTree: BigNumber;
        busTreeNewRoot: string;
        busBranchNewRoot: string;
      }
    >;

    export type BusBatchOnboardedEventFilter =
      TypedEventFilter<BusBatchOnboardedEvent>;

    export type BusBranchFilledEvent = TypedEvent<
      [BigNumber, string],
      { branchIndex: BigNumber; busBranchFinalRoot: string }
    >;

    export type BusBranchFilledEventFilter = TypedEventFilter<BusBranchFilledEvent>;

    export type BusQueueOpenedEvent = TypedEvent<
      [BigNumber],
      { queueId: BigNumber }
    >;

    export type BusQueueOpenedEventFilter = TypedEventFilter<BusQueueOpenedEvent>;

    export type BusQueueProcessedEvent = TypedEvent<
      [BigNumber],
      { queueId: BigNumber }
    >;

    export type BusQueueProcessedEventFilter =
      TypedEventFilter<BusQueueProcessedEvent>;

    export type BusQueueRewardAddedEvent = TypedEvent<
      [BigNumber, BigNumber],
      { queueId: BigNumber; accumReward: BigNumber }
    >;

    export type BusQueueRewardAddedEventFilter =
      TypedEventFilter<BusQueueRewardAddedEvent>;

    export type BusQueueRewardParamsUpdatedEvent = TypedEvent<
      [BigNumber, BigNumber, BigNumber],
      {
        reservationRate: BigNumber;
        premiumRate: BigNumber;
        minEmptyQueueAge: BigNumber;
      }
    >;

    export type BusQueueRewardParamsUpdatedEventFilter =
      TypedEventFilter<BusQueueRewardParamsUpdatedEvent>;

    export type BusQueueRewardReserveAllocatedEvent = TypedEvent<
      [BigNumber, BigNumber],
      { updatedNetRewardReserve: BigNumber; allocated: BigNumber }
    >;

    export type BusQueueRewardReserveAllocatedEventFilter =
      TypedEventFilter<BusQueueRewardReserveAllocatedEvent>;

    export type BusQueueRewardReserveUpdatedEvent = TypedEvent<
      [BigNumber],
      { updatedNetRewardReserve: BigNumber }
    >;

    export type BusQueueRewardReserveUpdatedEventFilter =
      TypedEventFilter<BusQueueRewardReserveUpdatedEvent>;

    export type ForestRootUpdatedEvent = TypedEvent<
      [BigNumber, string, string, BigNumber],
      {
        leafIndex: BigNumber;
        updatedLeaf: string;
        updatedRoot: string;
        cacheIndex: BigNumber;
      }
    >;

    export type ForestRootUpdatedEventFilter =
      TypedEventFilter<ForestRootUpdatedEvent>;

    export type MinerRewardAccountedEvent = TypedEvent<
      [number, string, BigNumber],
      { queueId: number; miner: string; reward: BigNumber }
    >;

    export type MinerRewardAccountedEventFilter =
      TypedEventFilter<MinerRewardAccountedEvent>;

    export type MinerRewardClaimedEvent = TypedEvent<
      [number, string, BigNumber],
      { timestamp: number; miner: string; reward: BigNumber }
    >;

    export type MinerRewardClaimedEventFilter =
      TypedEventFilter<MinerRewardClaimedEvent>;

    export type TaxiRootUpdatedEvent = TypedEvent<
      [string, BigNumber],
      { updatedRoot: string; numLeaves: BigNumber }
    >;

    export type TaxiRootUpdatedEventFilter = TypedEventFilter<TaxiRootUpdatedEvent>;

    export type TaxiSubtreeRootUpdatedEvent = TypedEvent<
      [string],
      { subtreeRoot: string }
    >;

    export type TaxiSubtreeRootUpdatedEventFilter =
      TypedEventFilter<TaxiSubtreeRootUpdatedEvent>;

    export type TaxiUtxoAddedEvent = TypedEvent<
      [string, BigNumber],
      { utxo: string; totalUtxoInsertions: BigNumber }
    >;

    export type TaxiUtxoAddedEventFilter = TypedEventFilter<TaxiUtxoAddedEvent>;

    export type UtxoBusQueuedEvent = TypedEvent<
      [string, BigNumber, BigNumber],
      { utxo: string; queueId: BigNumber; utxoIndexInBatch: BigNumber }
    >;

    export type UtxoBusQueuedEventFilter = TypedEventFilter<UtxoBusQueuedEvent>;

    export interface ForestTree extends BaseContract {
      contractName: "ForestTree";
      connect(signerOrProvider: Signer | Provider | string): this;
      attach(addressOrName: string): this;
      deployed(): Promise<this>;

      interface: ForestTreeInterface;

      queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
      ): Promise<Array<TEvent>>;

      listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
      ): Array<TypedListener<TEvent>>;
      listeners(eventName?: string): Array<Listener>;
      removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
      ): this;
      removeAllListeners(eventName?: string): this;
      off: OnEvent<this>;
      on: OnEvent<this>;
      once: OnEvent<this>;
      removeListener: OnEvent<this>;

      functions: {
        CLAIM_MINING_REWARD_VERSION(overrides?: CallOverrides): Promise<[number]>;

        FEE_MASTER(overrides?: CallOverrides): Promise<[string]>;

        REWARD_RESERVE_ALLOCATOR(overrides?: CallOverrides): Promise<[string]>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<[string]>;

        UNDEFINED_CACHE_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

        addUtxosToBusQueue(
          utxos: BytesLike[],
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        addUtxosToBusQueueAndTaxiTree(
          utxos: BytesLike[],
          numTaxiUtxos: BigNumberish,
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        allocateRewardReserve(
          allocated: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        busTreeStartTime(overrides?: CallOverrides): Promise<[number]>;

        claimMiningReward(
          receiver: string,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        claimMiningRewardWithSignature(
          receiver: string,
          v: BigNumberish,
          r: BytesLike,
          s: BytesLike,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        forestLeafs(
          arg0: BigNumberish,
          overrides?: CallOverrides
        ): Promise<[string]>;

        getBusQueue(
          queueId: BigNumberish,
          overrides?: CallOverrides
        ): Promise<
          [BusQueues.BusQueueRecStructOutput] & {
            queue: BusQueues.BusQueueRecStructOutput;
          }
        >;

        getBusQueuesStats(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number] & {
            curQueueId: number;
            numPendingQueues: number;
            oldestPendingQueueId: number;
          }
        >;

        getBusTreeRoot(overrides?: CallOverrides): Promise<[string]>;

        getBusTreeStats(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number, number] & {
            numBatchesInBusTree: number;
            numUtxosInBusTree: number;
            latestBranchFirstBatchBlock: number;
            latestBatchBlock: number;
          }
        >;

        getCacheStats(
          overrides?: CallOverrides
        ): Promise<
          [BigNumber, BigNumber] & {
            numRootsCached: BigNumber;
            latestCacheIndex: BigNumber;
          }
        >;

        getCachedPrimarySubtreeRoot(overrides?: CallOverrides): Promise<[string]>;

        getFerryTreeRoot(overrides?: CallOverrides): Promise<[string]>;

        getOldestPendingQueues(
          maxLength: BigNumberish,
          overrides?: CallOverrides
        ): Promise<
          [BusQueues.BusQueueRecStructOutput[]] & {
            queues: BusQueues.BusQueueRecStructOutput[];
          }
        >;

        getParams(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number] & {
            reservationRate: number;
            premiumRate: number;
            minEmptyQueueAge: number;
          }
        >;

        getRoots(
          overrides?: CallOverrides
        ): Promise<[string, string] & { _staticRoot: string; _forestRoot: string }>;

        getTaxiTreeRoot(overrides?: CallOverrides): Promise<[string]>;

        initializeForestTrees(
          onboardingQueueCircuitId: BigNumberish,
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        isCachedRoot(
          root: BytesLike,
          cacheIndex: BigNumberish,
          overrides?: CallOverrides
        ): Promise<[boolean] & { isCached: boolean }>;

        netRewardReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

        onboardBusQueue(
          miner: string,
          queueId: BigNumberish,
          inputs: BigNumberish[],
          proof: SnarkProofStruct,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        onboardingQueueCircuitId(overrides?: CallOverrides): Promise<[BigNumber]>;

        rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

        totalLeavesInsertions(overrides?: CallOverrides): Promise<[BigNumber]>;

        updateBusQueueRewardParams(
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        utxoCounter(overrides?: CallOverrides): Promise<[number]>;
      };

      CLAIM_MINING_REWARD_VERSION(overrides?: CallOverrides): Promise<number>;

      FEE_MASTER(overrides?: CallOverrides): Promise<string>;

      REWARD_RESERVE_ALLOCATOR(overrides?: CallOverrides): Promise<string>;

      REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

      UNDEFINED_CACHE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

      addUtxosToBusQueue(
        utxos: BytesLike[],
        cachedForestRootIndex: BigNumberish,
        forestRoot: BytesLike,
        staticRoot: BytesLike,
        reward: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      addUtxosToBusQueueAndTaxiTree(
        utxos: BytesLike[],
        numTaxiUtxos: BigNumberish,
        cachedForestRootIndex: BigNumberish,
        forestRoot: BytesLike,
        staticRoot: BytesLike,
        reward: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      allocateRewardReserve(
        allocated: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      busTreeStartTime(overrides?: CallOverrides): Promise<number>;

      claimMiningReward(
        receiver: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      claimMiningRewardWithSignature(
        receiver: string,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      forestLeafs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

      getBusQueue(
        queueId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BusQueues.BusQueueRecStructOutput>;

      getBusQueuesStats(
        overrides?: CallOverrides
      ): Promise<
        [number, number, number] & {
          curQueueId: number;
          numPendingQueues: number;
          oldestPendingQueueId: number;
        }
      >;

      getBusTreeRoot(overrides?: CallOverrides): Promise<string>;

      getBusTreeStats(
        overrides?: CallOverrides
      ): Promise<
        [number, number, number, number] & {
          numBatchesInBusTree: number;
          numUtxosInBusTree: number;
          latestBranchFirstBatchBlock: number;
          latestBatchBlock: number;
        }
      >;

      getCacheStats(
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, BigNumber] & {
          numRootsCached: BigNumber;
          latestCacheIndex: BigNumber;
        }
      >;

      getCachedPrimarySubtreeRoot(overrides?: CallOverrides): Promise<string>;

      getFerryTreeRoot(overrides?: CallOverrides): Promise<string>;

      getOldestPendingQueues(
        maxLength: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BusQueues.BusQueueRecStructOutput[]>;

      getParams(
        overrides?: CallOverrides
      ): Promise<
        [number, number, number] & {
          reservationRate: number;
          premiumRate: number;
          minEmptyQueueAge: number;
        }
      >;

      getRoots(
        overrides?: CallOverrides
      ): Promise<[string, string] & { _staticRoot: string; _forestRoot: string }>;

      getTaxiTreeRoot(overrides?: CallOverrides): Promise<string>;

      initializeForestTrees(
        onboardingQueueCircuitId: BigNumberish,
        reservationRate: BigNumberish,
        premiumRate: BigNumberish,
        minEmptyQueueAge: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      isCachedRoot(
        root: BytesLike,
        cacheIndex: BigNumberish,
        overrides?: CallOverrides
      ): Promise<boolean>;

      netRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

      onboardBusQueue(
        miner: string,
        queueId: BigNumberish,
        inputs: BigNumberish[],
        proof: SnarkProofStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      onboardingQueueCircuitId(overrides?: CallOverrides): Promise<BigNumber>;

      rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

      totalLeavesInsertions(overrides?: CallOverrides): Promise<BigNumber>;

      updateBusQueueRewardParams(
        reservationRate: BigNumberish,
        premiumRate: BigNumberish,
        minEmptyQueueAge: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;

      utxoCounter(overrides?: CallOverrides): Promise<number>;

      callStatic: {
        CLAIM_MINING_REWARD_VERSION(overrides?: CallOverrides): Promise<number>;

        FEE_MASTER(overrides?: CallOverrides): Promise<string>;

        REWARD_RESERVE_ALLOCATOR(overrides?: CallOverrides): Promise<string>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<string>;

        UNDEFINED_CACHE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

        addUtxosToBusQueue(
          utxos: BytesLike[],
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: CallOverrides
        ): Promise<
          [number, number] & {
            firstUtxoQueueId: number;
            firstUtxoIndexInQueue: number;
          }
        >;

        addUtxosToBusQueueAndTaxiTree(
          utxos: BytesLike[],
          numTaxiUtxos: BigNumberish,
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: CallOverrides
        ): Promise<
          [number, number] & {
            firstUtxoQueueId: number;
            firstUtxoIndexInQueue: number;
          }
        >;

        allocateRewardReserve(
          allocated: BigNumberish,
          overrides?: CallOverrides
        ): Promise<void>;

        busTreeStartTime(overrides?: CallOverrides): Promise<number>;

        claimMiningReward(
          receiver: string,
          overrides?: CallOverrides
        ): Promise<void>;

        claimMiningRewardWithSignature(
          receiver: string,
          v: BigNumberish,
          r: BytesLike,
          s: BytesLike,
          overrides?: CallOverrides
        ): Promise<void>;

        forestLeafs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

        getBusQueue(
          queueId: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BusQueues.BusQueueRecStructOutput>;

        getBusQueuesStats(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number] & {
            curQueueId: number;
            numPendingQueues: number;
            oldestPendingQueueId: number;
          }
        >;

        getBusTreeRoot(overrides?: CallOverrides): Promise<string>;

        getBusTreeStats(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number, number] & {
            numBatchesInBusTree: number;
            numUtxosInBusTree: number;
            latestBranchFirstBatchBlock: number;
            latestBatchBlock: number;
          }
        >;

        getCacheStats(
          overrides?: CallOverrides
        ): Promise<
          [BigNumber, BigNumber] & {
            numRootsCached: BigNumber;
            latestCacheIndex: BigNumber;
          }
        >;

        getCachedPrimarySubtreeRoot(overrides?: CallOverrides): Promise<string>;

        getFerryTreeRoot(overrides?: CallOverrides): Promise<string>;

        getOldestPendingQueues(
          maxLength: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BusQueues.BusQueueRecStructOutput[]>;

        getParams(
          overrides?: CallOverrides
        ): Promise<
          [number, number, number] & {
            reservationRate: number;
            premiumRate: number;
            minEmptyQueueAge: number;
          }
        >;

        getRoots(
          overrides?: CallOverrides
        ): Promise<[string, string] & { _staticRoot: string; _forestRoot: string }>;

        getTaxiTreeRoot(overrides?: CallOverrides): Promise<string>;

        initializeForestTrees(
          onboardingQueueCircuitId: BigNumberish,
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: CallOverrides
        ): Promise<void>;

        isCachedRoot(
          root: BytesLike,
          cacheIndex: BigNumberish,
          overrides?: CallOverrides
        ): Promise<boolean>;

        netRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

        onboardBusQueue(
          miner: string,
          queueId: BigNumberish,
          inputs: BigNumberish[],
          proof: SnarkProofStruct,
          overrides?: CallOverrides
        ): Promise<void>;

        onboardingQueueCircuitId(overrides?: CallOverrides): Promise<BigNumber>;

        rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        totalLeavesInsertions(overrides?: CallOverrides): Promise<BigNumber>;

        updateBusQueueRewardParams(
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: CallOverrides
        ): Promise<void>;

        utxoCounter(overrides?: CallOverrides): Promise<number>;
      };

      filters: {
        "BusBatchOnboarded(uint256,bytes32,uint256,uint256,bytes32,bytes32)"(
          queueId?: BigNumberish | null,
          batchRoot?: BytesLike | null,
          numUtxosInBatch?: null,
          leftLeafIndexInBusTree?: null,
          busTreeNewRoot?: null,
          busBranchNewRoot?: null
        ): BusBatchOnboardedEventFilter;
        BusBatchOnboarded(
          queueId?: BigNumberish | null,
          batchRoot?: BytesLike | null,
          numUtxosInBatch?: null,
          leftLeafIndexInBusTree?: null,
          busTreeNewRoot?: null,
          busBranchNewRoot?: null
        ): BusBatchOnboardedEventFilter;

        "BusBranchFilled(uint256,bytes32)"(
          branchIndex?: BigNumberish | null,
          busBranchFinalRoot?: null
        ): BusBranchFilledEventFilter;
        BusBranchFilled(
          branchIndex?: BigNumberish | null,
          busBranchFinalRoot?: null
        ): BusBranchFilledEventFilter;

        "BusQueueOpened(uint256)"(queueId?: null): BusQueueOpenedEventFilter;
        BusQueueOpened(queueId?: null): BusQueueOpenedEventFilter;

        "BusQueueProcessed(uint256)"(
          queueId?: BigNumberish | null
        ): BusQueueProcessedEventFilter;
        BusQueueProcessed(
          queueId?: BigNumberish | null
        ): BusQueueProcessedEventFilter;

        "BusQueueRewardAdded(uint256,uint256)"(
          queueId?: BigNumberish | null,
          accumReward?: null
        ): BusQueueRewardAddedEventFilter;
        BusQueueRewardAdded(
          queueId?: BigNumberish | null,
          accumReward?: null
        ): BusQueueRewardAddedEventFilter;

        "BusQueueRewardParamsUpdated(uint256,uint256,uint256)"(
          reservationRate?: null,
          premiumRate?: null,
          minEmptyQueueAge?: null
        ): BusQueueRewardParamsUpdatedEventFilter;
        BusQueueRewardParamsUpdated(
          reservationRate?: null,
          premiumRate?: null,
          minEmptyQueueAge?: null
        ): BusQueueRewardParamsUpdatedEventFilter;

        "BusQueueRewardReserveAllocated(int112,uint112)"(
          updatedNetRewardReserve?: null,
          allocated?: null
        ): BusQueueRewardReserveAllocatedEventFilter;
        BusQueueRewardReserveAllocated(
          updatedNetRewardReserve?: null,
          allocated?: null
        ): BusQueueRewardReserveAllocatedEventFilter;

        "BusQueueRewardReserveUpdated(int112)"(
          updatedNetRewardReserve?: null
        ): BusQueueRewardReserveUpdatedEventFilter;
        BusQueueRewardReserveUpdated(
          updatedNetRewardReserve?: null
        ): BusQueueRewardReserveUpdatedEventFilter;

        "ForestRootUpdated(uint256,bytes32,bytes32,uint256)"(
          leafIndex?: BigNumberish | null,
          updatedLeaf?: null,
          updatedRoot?: null,
          cacheIndex?: null
        ): ForestRootUpdatedEventFilter;
        ForestRootUpdated(
          leafIndex?: BigNumberish | null,
          updatedLeaf?: null,
          updatedRoot?: null,
          cacheIndex?: null
        ): ForestRootUpdatedEventFilter;

        "MinerRewardAccounted(uint32,address,uint256)"(
          queueId?: null,
          miner?: null,
          reward?: null
        ): MinerRewardAccountedEventFilter;
        MinerRewardAccounted(
          queueId?: null,
          miner?: null,
          reward?: null
        ): MinerRewardAccountedEventFilter;

        "MinerRewardClaimed(uint32,address,uint256)"(
          timestamp?: null,
          miner?: null,
          reward?: null
        ): MinerRewardClaimedEventFilter;
        MinerRewardClaimed(
          timestamp?: null,
          miner?: null,
          reward?: null
        ): MinerRewardClaimedEventFilter;

        "TaxiRootUpdated(bytes32,uint256)"(
          updatedRoot?: null,
          numLeaves?: null
        ): TaxiRootUpdatedEventFilter;
        TaxiRootUpdated(
          updatedRoot?: null,
          numLeaves?: null
        ): TaxiRootUpdatedEventFilter;

        "TaxiSubtreeRootUpdated(bytes32)"(
          subtreeRoot?: null
        ): TaxiSubtreeRootUpdatedEventFilter;
        TaxiSubtreeRootUpdated(
          subtreeRoot?: null
        ): TaxiSubtreeRootUpdatedEventFilter;

        "TaxiUtxoAdded(bytes32,uint256)"(
          utxo?: null,
          totalUtxoInsertions?: null
        ): TaxiUtxoAddedEventFilter;
        TaxiUtxoAdded(
          utxo?: null,
          totalUtxoInsertions?: null
        ): TaxiUtxoAddedEventFilter;

        "UtxoBusQueued(bytes32,uint256,uint256)"(
          utxo?: BytesLike | null,
          queueId?: BigNumberish | null,
          utxoIndexInBatch?: null
        ): UtxoBusQueuedEventFilter;
        UtxoBusQueued(
          utxo?: BytesLike | null,
          queueId?: BigNumberish | null,
          utxoIndexInBatch?: null
        ): UtxoBusQueuedEventFilter;
      };

      estimateGas: {
        CLAIM_MINING_REWARD_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

        FEE_MASTER(overrides?: CallOverrides): Promise<BigNumber>;

        REWARD_RESERVE_ALLOCATOR(overrides?: CallOverrides): Promise<BigNumber>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

        UNDEFINED_CACHE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

        addUtxosToBusQueue(
          utxos: BytesLike[],
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        addUtxosToBusQueueAndTaxiTree(
          utxos: BytesLike[],
          numTaxiUtxos: BigNumberish,
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        allocateRewardReserve(
          allocated: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        busTreeStartTime(overrides?: CallOverrides): Promise<BigNumber>;

        claimMiningReward(
          receiver: string,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        claimMiningRewardWithSignature(
          receiver: string,
          v: BigNumberish,
          r: BytesLike,
          s: BytesLike,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        forestLeafs(
          arg0: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BigNumber>;

        getBusQueue(
          queueId: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BigNumber>;

        getBusQueuesStats(overrides?: CallOverrides): Promise<BigNumber>;

        getBusTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

        getBusTreeStats(overrides?: CallOverrides): Promise<BigNumber>;

        getCacheStats(overrides?: CallOverrides): Promise<BigNumber>;

        getCachedPrimarySubtreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

        getFerryTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

        getOldestPendingQueues(
          maxLength: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BigNumber>;

        getParams(overrides?: CallOverrides): Promise<BigNumber>;

        getRoots(overrides?: CallOverrides): Promise<BigNumber>;

        getTaxiTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

        initializeForestTrees(
          onboardingQueueCircuitId: BigNumberish,
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        isCachedRoot(
          root: BytesLike,
          cacheIndex: BigNumberish,
          overrides?: CallOverrides
        ): Promise<BigNumber>;

        netRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

        onboardBusQueue(
          miner: string,
          queueId: BigNumberish,
          inputs: BigNumberish[],
          proof: SnarkProofStruct,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        onboardingQueueCircuitId(overrides?: CallOverrides): Promise<BigNumber>;

        rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

        totalLeavesInsertions(overrides?: CallOverrides): Promise<BigNumber>;

        updateBusQueueRewardParams(
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        utxoCounter(overrides?: CallOverrides): Promise<BigNumber>;
      };

      populateTransaction: {
        CLAIM_MINING_REWARD_VERSION(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        FEE_MASTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        REWARD_RESERVE_ALLOCATOR(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        REWARD_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        UNDEFINED_CACHE_INDEX(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        addUtxosToBusQueue(
          utxos: BytesLike[],
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        addUtxosToBusQueueAndTaxiTree(
          utxos: BytesLike[],
          numTaxiUtxos: BigNumberish,
          cachedForestRootIndex: BigNumberish,
          forestRoot: BytesLike,
          staticRoot: BytesLike,
          reward: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        allocateRewardReserve(
          allocated: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        busTreeStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        claimMiningReward(
          receiver: string,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        claimMiningRewardWithSignature(
          receiver: string,
          v: BigNumberish,
          r: BytesLike,
          s: BytesLike,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        forestLeafs(
          arg0: BigNumberish,
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getBusQueue(
          queueId: BigNumberish,
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getBusQueuesStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getBusTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getBusTreeStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCacheStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getCachedPrimarySubtreeRoot(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getFerryTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getOldestPendingQueues(
          maxLength: BigNumberish,
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getRoots(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getTaxiTreeRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        initializeForestTrees(
          onboardingQueueCircuitId: BigNumberish,
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        isCachedRoot(
          root: BytesLike,
          cacheIndex: BigNumberish,
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        netRewardReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        onboardBusQueue(
          miner: string,
          queueId: BigNumberish,
          inputs: BigNumberish[],
          proof: SnarkProofStruct,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        onboardingQueueCircuitId(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        rewards(
          arg0: string,
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        totalLeavesInsertions(
          overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        updateBusQueueRewardParams(
          reservationRate: BigNumberish,
          premiumRate: BigNumberish,
          minEmptyQueueAge: BigNumberish,
          overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        utxoCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
      };
    }
